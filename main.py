import logging
from aiogram import Bot, Dispatcher
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from config import API_TOKEN
from handlers import start_command, show_all_products, search_product, admin_login, add_product_name, add_product, search_by_sku
from db import create_products_table

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
create_products_table()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
dp.register_message_handler(start_command, commands=['start'])
dp.register_message_handler(show_all_products, lambda message: message.text == "üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã")
dp.register_message_handler(search_product, lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
dp.register_message_handler(search_by_sku, lambda message: message.text.isdigit())
dp.register_message_handler(admin_login, lambda message: message.text.startswith("admin://"))
dp.register_callback_query_handler(add_product, lambda c: c.data == "add_product")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
