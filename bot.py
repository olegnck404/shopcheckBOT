import logging
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import CommandStart, Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config import API_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
dp = Dispatcher(bot, storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö SQLite
conn = sqlite3.connect('products.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–∞—Ö
cursor.execute('''
CREATE TABLE IF NOT EXISTS products (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    photo TEXT,
    name TEXT,
    sku TEXT UNIQUE,
    quantity INTEGER,
    price REAL
)
''')
conn.commit()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class AdminStates(StatesGroup):
    ENTER_PASSWORD = State()  # –í–≤–æ–¥ –ø–∞—Ä–æ–ª—è –¥–ª—è –∞–¥–º–∏–Ω–∞
    CHOOSE_ACTION = State()  # –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
    ADD_PRODUCT_NAME = State()  # –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
    ADD_PRODUCT_SKU = State()  # –í–≤–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞
    ADD_PRODUCT_PRICE = State()  # –í–≤–æ–¥ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞
    ADD_PRODUCT_QUANTITY = State()  # –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
    ADD_PRODUCT_PHOTO = State()  # –í–≤–æ–¥ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞

# –ü–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
ADMIN_PASSWORD = "158x12llo"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"),
        KeyboardButton("üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
def create_admin_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(
        KeyboardButton("üìã –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —Ç–æ–≤–∞—Ä–∞–º–∏
def create_products_keyboard(is_admin=False):
    keyboard = InlineKeyboardMarkup(row_width=1)
    cursor.execute("SELECT sku, name FROM products")
    products = cursor.fetchall()
    
    if products:
        for sku, name in products:
            keyboard.add(InlineKeyboardButton(name, callback_data=f"view_product_{sku}"))
    
    if is_admin:
        keyboard.add(InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="add_product"))
    
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
def create_product_edit_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="edit_product"),
        InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data="delete_product"),
        InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_product_list")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Ç–æ–≤–∞—Ä–∞
def create_change_product_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        InlineKeyboardButton("üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"),
        InlineKeyboardButton("üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data="edit_price"),
        InlineKeyboardButton("üì¶ –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_quantity"),
        InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_product")
    )
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É
def get_product_by_sku(sku):
    cursor.execute("SELECT * FROM products WHERE sku = ?", (sku,))
    return cursor.fetchone()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –ø–æ–∏—Å–∫–æ–º —Ç–æ–≤–∞—Ä–æ–≤. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–í—Å–µ —Ç–æ–≤–∞—Ä—ã"
@dp.message_handler(lambda message: message.text == "üìã –í—Å–µ —Ç–æ–≤–∞—Ä—ã")
async def all_products(message: types.Message):
    keyboard = create_products_keyboard(is_admin=False)
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"
@dp.message_handler(lambda message: message.text == "üîç –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É")
async def search_product(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:")
    await AdminStates.ENTER_PASSWORD.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–∞
@dp.message_handler(lambda message: message.text.isdigit(), state=AdminStates.ENTER_PASSWORD)
async def search_by_sku(message: types.Message, state: FSMContext):
    sku = message.text.strip()
    product = get_product_by_sku(sku)
    
    if product:
        _, photo, name, sku, quantity, price = product
        if photo:
            await message.answer_photo(photo, caption=f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {name}\nüì¶ –ê—Ä—Ç–∏–∫—É–ª: {sku}\nüí≤ –¶–µ–Ω–∞: {price}\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        else:
            await message.answer(f"–¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω: {name}\nüì¶ –ê—Ä—Ç–∏–∫—É–ª: {sku}\nüí≤ –¶–µ–Ω–∞: {price}\nüìà –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        # –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup().add(InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")))
    else:
        await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º –∞—Ä—Ç–∏–∫—É–ª–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
@dp.message_handler(lambda message: message.text.startswith("admin://"))
async def admin_login(message: types.Message):
    password = message.text.split("://")[1]
    if password == ADMIN_PASSWORD:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=create_admin_keyboard())
        await AdminStates.CHOOSE_ACTION.set()
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
@dp.message_handler(lambda message: message.text == "üìã –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã", state=AdminStates.CHOOSE_ACTION)
async def show_all_products_admin(message: types.Message):
    keyboard = create_products_keyboard(is_admin=True)
    await message.answer("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä" (–æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫)
@dp.callback_query_handler(lambda c: c.data == "add_product")
async def add_product(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:")
    await AdminStates.ADD_PRODUCT_NAME.set()
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É —Ç–æ–≤–∞—Ä–∞
@dp.callback_query_handler(lambda c: c.data.startswith('view_product_'))
async def view_product(callback_query: CallbackQuery):
    sku = callback_query.data.split('_')[2]
    product = get_product_by_sku(sku)
    
    if product:
        _, photo, name, sku, quantity, price = product
        if photo:
            await bot.send_photo(callback_query.from_user.id, photo, caption=f"–¢–æ–≤–∞—Ä: {name}\n–ê—Ä—Ç–∏–∫—É–ª: {sku}\n–¶–µ–Ω–∞: {price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        else:
            await bot.send_message(callback_query.from_user.id, f"–¢–æ–≤–∞—Ä: {name}\n–ê—Ä—Ç–∏–∫—É–ª: {sku}\n–¶–µ–Ω–∞: {price}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity}")
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=create_product_edit_keyboard())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–≤–∞—Ä"
@dp.callback_query_handler(lambda c: c.data == 'edit_product')
async def edit_product(callback_query: CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=create_change_product_keyboard())
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥"
@dp.callback_query_handler(lambda c: c.data == 'back_to_product_list')
async def back_to_product_list(callback_query: CallbackQuery):
    keyboard = create_products_keyboard(is_admin=True)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=keyboard)
    await callback_query.answer()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
